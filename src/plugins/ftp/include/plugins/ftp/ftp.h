// WARNING: THIS FILE IS AUTOGENERATED! As such, it should not be edited.
// Edits need to be made to the proto files
// (see https://github.com/mavlink/MAVSDK-Proto/blob/master/protos/ftp/ftp.proto)

#pragma once

#include <array>
#include <cmath>
#include <functional>
#include <limits>
#include <memory>
#include <string>
#include <utility>
#include <vector>

#include "plugin_base.h"

namespace mavsdk {

class System;
class FtpImpl;

/**
 * @brief Implements file transfer functionality using MAVLink FTP.
 */
class Ftp : public PluginBase {
public:
    /**
     * @brief Constructor. Creates the plugin for a specific System.
     *
     * The plugin is typically created as shown below:
     *
     *     ```cpp
     *     auto ftp = std::make_shared<Ftp>(system);
     *     ```
     *
     * @param system The specific system associated with this plugin.
     */
    explicit Ftp(System& system);

    /**
     * @brief Destructor (internal use only).
     */
    ~Ftp();

    /**
     * @brief Progress data type for file transfer.
     */
    struct ProgressData {
        uint32_t bytes_transferred{}; /**< @brief The number of bytes already transferred. */
        uint32_t total_bytes{}; /**< @brief The total bytes to transfer. */
    };

    /**
     * @brief Equal operator to compare two `Ftp::ProgressData` objects.
     *
     * @return `true` if items are equal.
     */
    friend bool operator==(const Ftp::ProgressData& lhs, const Ftp::ProgressData& rhs);

    /**
     * @brief Stream operator to print information about a `Ftp::ProgressData`.
     *
     * @return A reference to the stream.
     */
    friend std::ostream& operator<<(std::ostream& str, Ftp::ProgressData const& progress_data);

    /**
     * @brief Possible results returned for FTP commands
     */
    enum class Result {
        Unknown, /**< @brief Unknown error. */
        Success, /**< @brief Success. */
        Next, /**< @brief Intermediate message showing progress. */
        Timeout, /**< @brief Timeout. */
        Busy, /**< @brief Operation is already in progress. */
        FileIoError, /**< @brief File IO operation error. */
        FileExists, /**< @brief File exists already. */
        FileDoesNotExist, /**< @brief File does not exist. */
        FileProtected, /**< @brief File is write protected. */
        InvalidParameter, /**< @brief Invalid parameter. */
        Unsupported, /**< @brief Unsupported command. */
        ProtocolError, /**< @brief General protocol error. */
    };

    /**
     * @brief Stream operator to print information about a `Ftp::Result`.
     *
     * @return A reference to the stream.
     */
    friend std::ostream& operator<<(std::ostream& str, Ftp::Result const& result);

    /**
     * @brief Callback type for asynchronous Ftp calls.
     */
    using ResultCallback = std::function<void(Result)>;

    /**
     * @brief Resets FTP server in case there are stale open sessions.
     *
     * This function is non-blocking.
     */
    void reset_async(const ResultCallback callback);

    /**
     * @brief Callback type for download_async.
     */

    using DownloadCallback = std::function<void(Ftp::Result, ProgressData)>;

    /**
     * @brief Downloads a file to local directory.
     */
    void
    download_async(std::string remote_file_path, std::string local_dir, DownloadCallback callback);

    /**
     * @brief Callback type for upload_async.
     */

    using UploadCallback = std::function<void(Ftp::Result, ProgressData)>;

    /**
     * @brief Uploads local file to remote directory.
     */
    void upload_async(std::string local_file_path, std::string remote_dir, UploadCallback callback);

    /**
     * @brief Callback type for list_directory_async.
     */
    using ListDirectoryCallback = std::function<void(Result, std::vector<std::string>)>;

    /**
     * @brief Lists items from a remote directory.
     *
     * This function is non-blocking.
     */
    void list_directory_async(std::string remote_dir, const ListDirectoryCallback callback);

    /**
     * @brief Creates a remote directory.
     *
     * This function is non-blocking.
     */
    void create_directory_async(std::string remote_dir, const ResultCallback callback);

    /**
     * @brief Removes a remote directory.
     *
     * This function is non-blocking.
     */
    void remove_directory_async(std::string remote_dir, const ResultCallback callback);

    /**
     * @brief Removes a remote file.
     *
     * This function is non-blocking.
     */
    void remove_file_async(std::string remote_file_path, const ResultCallback callback);

    /**
     * @brief Renames a remote file or remote directory.
     *
     * This function is non-blocking.
     */
    void rename_async(
        std::string remote_from_path, std::string remote_to_path, const ResultCallback callback);

    /**
     * @brief Callback type for are_files_identical_async.
     */
    using AreFilesIdenticalCallback = std::function<void(Result, bool)>;

    /**
     * @brief Compares a local file to a remote file using a CRC32 checksum.
     *
     * This function is non-blocking.
     */
    void are_files_identical_async(
        std::string local_file_path,
        std::string remote_file_path,
        const AreFilesIdenticalCallback callback);

    /**
     * @brief Set root directory for MAVLink FTP server.
     *
     * This function is blocking.
     *
     * @return Result of request.
     */
    Result set_root_directory(std::string root_dir) const;

    /**
     * @brief Set target component ID. By default it is the autopilot.
     *
     * This function is blocking.
     *
     * @return Result of request.
     */
    Result set_target_component_id(uint32_t component_id) const;

    /**
     * @brief Get our own component ID.
     *
     * This function is blocking.
     *
     * @return Result of request.
     */
    uint32_t get_our_component_id() const;

    /**
     * @brief Returns a human-readable English string for a Result.
     *
     * @param result The enum value for which a human readable string is required.
     * @return Human readable string for the Result.
     */
    static const char* result_str(Result result);

    /**
     * @brief Copy constructor (object is not copyable).
     */
    Ftp(const Ftp&) = delete;

    /**
     * @brief Equality operator (object is not copyable).
     */
    const Ftp& operator=(const Ftp&) = delete;

private:
    /** @private Underlying implementation, set at instantiation */
    std::unique_ptr<FtpImpl> _impl;
};

} // namespace mavsdk