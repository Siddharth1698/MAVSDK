// WARNING: THIS FILE IS AUTOGENERATED! As such, it should not be edited.
// Edits need to be made to the proto files
// (see https://github.com/mavlink/MAVSDK-Proto/blob/master/protos/tune/tune.proto)

#include <iomanip>

#include "tune_impl.h"
#include "plugins/tune/tune.h"

namespace mavsdk {

using TuneDescription = Tune::TuneDescription;

Tune::Tune(System& system) : PluginBase(), _impl{new TuneImpl(system)} {}

Tune::~Tune() {}

void Tune::play_tune_async(TuneDescription description, const ResultCallback callback)
{
    _impl->play_tune_async(description, callback);
}

bool operator==(const Tune::TuneDescription& lhs, const Tune::TuneDescription& rhs)
{
    return (rhs.song_elements == lhs.song_elements) && (rhs.tempo == lhs.tempo);
}

std::ostream& operator<<(std::ostream& str, Tune::TuneDescription const& tune_description)
{
    str << std::setprecision(15);
    str << "tune_description:" << '\n' << "{\n";
    str << "    song_elements: [";
    for (auto it = tune_description.song_elements.begin();
         it != tune_description.song_elements.end();
         ++it) {
        str << *it;
        str << (it + 1 != tune_description.song_elements.end() ? ", " : "]\n");
    }
    str << "    tempo: " << tune_description.tempo << '\n';
    str << '}';
    return str;
}

const char* Tune::result_str(Tune::Result result)
{
    switch (result) {
        case Tune::Result::Success:
            return "Request succeeded";
        case Tune::Result::InvalidTempo:
            return "Invalid tempo (range: 32 - 255)";
        case Tune::Result::TuneTooLong:
            return "Invalid tune: encoded string must be at most 247 chars";
        case Tune::Result::Error:
            return "Failed to send the request";
        default:
            return "Unknown";
    }
}

std::ostream& operator<<(std::ostream& str, Tune::Result const& result)
{
    switch (result) {
        case Tune::Result::Success:
            return str << "Result Success";
        case Tune::Result::InvalidTempo:
            return str << "Result Invalid Tempo";
        case Tune::Result::TuneTooLong:
            return str << "Result Tune Too Long";
        case Tune::Result::Error:
            return str << "Result Error";
        default:
            return str << "Unknown";
    }
}

std::ostream& operator<<(std::ostream& str, Tune::SongElement const& song_element)
{
    switch (song_element) {
        case Tune::SongElement::StyleLegato:
            return str << "Song Element Style Legato";
        case Tune::SongElement::StyleNormal:
            return str << "Song Element Style Normal";
        case Tune::SongElement::StyleStaccato:
            return str << "Song Element Style Staccato";
        case Tune::SongElement::Duration1:
            return str << "Song Element Duration 1";
        case Tune::SongElement::Duration2:
            return str << "Song Element Duration 2";
        case Tune::SongElement::Duration4:
            return str << "Song Element Duration 4";
        case Tune::SongElement::Duration8:
            return str << "Song Element Duration 8";
        case Tune::SongElement::Duration16:
            return str << "Song Element Duration 16";
        case Tune::SongElement::Duration32:
            return str << "Song Element Duration 32";
        case Tune::SongElement::NoteA:
            return str << "Song Element Note A";
        case Tune::SongElement::NoteB:
            return str << "Song Element Note B";
        case Tune::SongElement::NoteC:
            return str << "Song Element Note C";
        case Tune::SongElement::NoteD:
            return str << "Song Element Note D";
        case Tune::SongElement::NoteE:
            return str << "Song Element Note E";
        case Tune::SongElement::NoteF:
            return str << "Song Element Note F";
        case Tune::SongElement::NoteG:
            return str << "Song Element Note G";
        case Tune::SongElement::NotePause:
            return str << "Song Element Note Pause";
        case Tune::SongElement::Sharp:
            return str << "Song Element Sharp";
        case Tune::SongElement::Flat:
            return str << "Song Element Flat";
        case Tune::SongElement::OctaveUp:
            return str << "Song Element Octave Up";
        case Tune::SongElement::OctaveDown:
            return str << "Song Element Octave Down";
        default:
            return str << "Unknown";
    }
}

} // namespace mavsdk